xquery version "3.1";
(:~ 
 : @author Duncan Paterson
 : @version 0.7:)
 
module namespace app="http://exist-db.org/apps/cbdb-data/templates";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://exist-db.org/apps/cbdb-data/config" at "config.xqm";
import module namespace docs="http://exist-db.org/xquery/docs" at "/db/apps/fundocs/modules/scan.xql";
import module namespace inspect="http://exist-db.org/xquery/inspection" at "java:org.exist.xquery.functions.inspect.InspectionModule";
import module namespace global="http://exist-db.org/apps/cbdb-data/global" at "global.xqm";
import module namespace util="http://exist-db.org/xquery/util";

declare namespace xqdoc="http://www.xqdoc.org/1.0";

declare function app:test($node as node(), $model as map(*)) {
(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute: data-template="app:test" or class="app:test" (deprecated). 
 : The function has to take 2 default parameters. Additional parameters are automatically mapped to
 : any matching request or function parameter.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls.:)
 
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the data-template attribute <code>data-template="app:test"</code>.</p>
};

(:~ 
 : construct a variable declaration for each file in the source collection.
 :
 : @param $files collection path
 :)
declare 
    %private
    function app:table-variables($path as xs:string?) as xs:string* {

(:construct a variable declaration for each file in the collection:)
for $files in collection($path)
let $name := util:document-name($files)
let $var := substring-before($name, ".")
order by $name

return
     'declare variable' || ' $config:' || $var || ' := doc($config:src-data' || " || '" || $name || "');"
};

declare function app:validate-fragment ($frag as node()*, $loc as xs:string?) as item()* {

(:~
: This function validates $frag by inserting it into a minimal TEI template. 
:
: This function cannot guarantee that the final document is valid, 
: but it can catch validation errors produced by other function early on.
: This minimizes the number of validations necessary to produce the final output. 
:
: @param $frag the fragment (usually some function's output) to be validated.
: @param $loc accepts the following element names as root to be used for validation: 
:    *   category
:    *   charDecl
:    *   person
:    *   org
:    *   bibl
:    *   place
:
: @return if validation succeeds then return the input, otherwise store a copy of the validation report 
: into the reports directory, including the ``xml:id`` of the root element of the processed fragment.:)

let $id := data($frag/@xml:id)
let $mini := 
<TEI xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
      <fileDesc>
         <titleStmt>
            <title>cbdbTEI-mini</title>
         </titleStmt>
         <publicationStmt>
            <p>testing ouput of individual functions using this mini tei document.</p>
         </publicationStmt>
         <sourceDesc>
            <p>cannot replace proper validation of final output</p>
         </sourceDesc>
      </fileDesc>
      <encodingDesc>
         <classDecl>
            {if ($loc = 'category')
             then (<taxonomy>{$frag}</taxonomy>)
             else (<taxonomy><category><catDesc>some category</catDesc></category></taxonomy>)}
         </classDecl>
            {if ($loc = 'charDecl')
            then ($frag)
            else (<charDecl><glyph><mapping>⿸虍⿻夂丷⿱目</mapping></glyph></charDecl>)}        
      </encodingDesc>
  </teiHeader>
  <text>
      <body>       
         {
         switch ($loc)
         case 'person' return <listPerson ana="chunk"><listPerson ana="block">{$frag}</listPerson></listPerson>
         case 'org' return <listOrg>{$frag}</listOrg>
         case 'place' return <listPlace>{$frag}</listPlace>
         case 'bibl' return <listBibl>{$frag}</listBibl>
         default return (<p>some text here {data($frag)}</p>)
         }         
      </body>
  </text>
</TEI>

return 
    if (validation:jing($mini, doc('../templates/tei/tei_all.rng')) = true())
    then ($frag)
    else (($frag, 
          xmldb:store($global:report,  concat('report-',$id,'.xml'),
          validation:jing-report($mini, doc('../templates/tei/tei_all.rng')))))
};