xquery version "3.1";

(:~ 
: This module generates the function documentation for the various xQuery modules, in markdown format.
:    
: @author Duncan Paterson
: @version 0.7
: 
: @return  func-doc.md:)

(:
: TODO:
: Find a good way of making clickable links that work on GitHub and standanlone:)

import module namespace app="http://exist-db.org/apps/cbdb-data/templates" at "app.xql";
import module namespace docs="http://exist-db.org/xquery/docs" at "/db/apps/fundocs/modules/scan.xql";
import module namespace global="http://exist-db.org/apps/cbdb-data/global" at "global.xqm";

declare namespace xqdoc="http://www.xqdoc.org/1.0";

declare variable $modules := (xs:anyURI($global:modules || "app.xql"),  
    xs:anyURI($global:modules || "bibliography.xql"),
    xs:anyURI($global:modules || "biographies.xql"),
    xs:anyURI($global:modules || "calendar.xql"),    
    xs:anyURI($global:modules || "genre.xql"),
    xs:anyURI($global:modules || "global.xqm"),
    xs:anyURI($global:modules || "institutions.xql"),
    xs:anyURI($global:modules || "officeA.xql"),
    xs:anyURI($global:modules || "place.xql"));

declare function local:report-transform ($nodes as node()*) as item()* {
(:~ 
: This is the main transformation from xml into md.
:
: @param $node expects a node from the xqDoc report generated by exist. 
: @see http://xqdoc.org
: @see http://www.exist-db.org/exist/apps/doc/xqdoc.xml?q=xqDoc&field=all&id=D2.2.2#D2.2.2
:)

for $n in $nodes
return
    switch(local-name($n))
       (: case "module" return concat('## Module Uri', '&#xa;','[', data($doc/@uri), '](', data($doc/@location), ')', '&#xa;'):)
        case "variable" return '*   *$' || data($n/@name) || '* - *missing description*'
        case "xxx" return '*   ' || $n || '&#xa;'
        case "function" return '```xQuery' || '&#xa;' || 'declare function ' || data($n/@name) || 
            "(" || string-join(
                 for $param in $n/argument
                 return
                     "$" || $param/@var/string()  || " as " || $param/@type/string() || docs:cardinality($param/@cardinality),
                 ", ") || 
             ")" || " as " || $n/returns/@type/string() || docs:cardinality($n/returns/@cardinality) || '&#xa;' || '```'
        case "argument" return '*   ' || '$' ||  data($n/@var) || ' - ' || $n/text()
        case "returns" return '*  ' || $n/text()
        case "description" return normalize-space($n/string())
        case "calls" return 
            for $c in $n/function
            return
                '<' || data($c/@module) || '>' || '|[' || data($c/@name) || '](#' || data($c/@name) || ')'
        case "annotation" return ()
        case "value" return () 
        case "xml" return ()
        case "version" return '*   Version: ' || normalize-space($n/text())
        case "author" return '*   Author: ' || normalize-space($n/text())
        case "since" return '*   Since: ' || normalize-space($n/text())
        case "control" return ()
        case "signature" return $n/text()
        case "deprecated" return '*   Depreceated:' || normalize-space($n/text())
        case "see" return '*   [see](' || normalize-space($n/text()) || ')&#xa;'
    default return ()
};


(:~
: Read the xqDoc annotation of a module and stores a markdown version in the doc folder.
:
: @param $modules the xQuery modules containing the annotation. 
: @param $filename the name of the documentation file.
:
: @return func-doc.md:)

(:H1 Heading:)
    ('# Function Documentation' || '&#xa;',

(:TOC goes here:)
    let $docs := $modules ! inspect:inspect-module(.)
    for $doc in $docs
    return
        ('## Module URI&#xa;' || '[' || data($doc/@uri) || '](' || data($doc/@location) || ')',
    
        (: !! These are not captured by inspect needs PR !! :)
        if ($doc/description)
        then ('&#xa;' || '## Module Description',
                local:report-transform($doc/description),
                local:report-transform($doc/author),
                local:report-transform($doc/version),
                local:report-transform($doc/since),
                local:report-transform($doc/depreceated),
                local:report-transform($doc/see))
        else (),
    
    (: Variables :)
        if ($doc/variable)
        then ('&#xa;' || '## Variables:')
        else (),
    
    (: the table for variable calls is currently empty see    :)
        for $v in $doc/variable
            return
                (local:report-transform($v),
    
                if ($v/calls)
                then ('&#xa;' || '### Internal Functions that reference this Variable' || '&#xa;' ||
                      '*Module URI*|*Function Name*' || '&#xa;'|| ':----|:----' ,
                        for $c in $v/calls 
                        return
                            local:report-transform($c))
                else()),
    
    (:  Functions :)
        if ($doc/function)
        then ('&#xa;' || '## Function Summary')
        else (),
    
        for $f in $doc/function
        return
        ('&#xa;' || '### ' || data($f/@name),
    
        local:report-transform($f),
    
        if ($f/description)
        then ('&#xa;' || '### Function Detail:',
                local:report-transform($f/description))
        else (),
    
        if ($f/argument)
        then ('&#xa;' || '#### Parameters:',
                local:report-transform($f/argument))
        else (),
    
        if ($f/returns)
        then ('&#xa;' || '#### Returns:',
                local:report-transform($f/returns))
        else(),
    
        if ($f/calls)
        then ('&#xa;' || '#### External Functions that are used by this Function' || '&#xa;' ||
              '*Module URI*|*Function Name*' || '&#xa;' || ':----|:----',
                for $c in $f/calls 
                return
                    local:report-transform($c))
        else()) 
    , '&#xa;')
    )
